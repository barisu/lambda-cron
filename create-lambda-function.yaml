AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  BacketName:
    Type: String
  FunctionName:
    Type: String
Resources:
  MyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Code:
        S3Bucket: !Ref BacketName
        S3Key: build.zip
      Handler: index.handler
      Role: !GetAtt MyFunctionRole.Arn
      Runtime: nodejs16.x
  MyFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: MyFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action: 
            - s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${BacketName}/*'
  MyEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0,30 * * * ? *)
      State: ENABLED
      Targets:
      - Id: MyFunction
        Arn: !GetAtt MyFunction.Arn
  PermissionForEventsToInvokeLambda:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref MyFunction
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt MyEventRule.Arn
